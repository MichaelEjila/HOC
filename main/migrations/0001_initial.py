# Generated by Django 4.2.2 on 2023-06-18 23:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.utils.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('matric_number', models.CharField(max_length=13, null=True, unique=True, validators=[main.utils.validators.UserValidator.validate_matric_number])),
                ('user_category', models.CharField(choices=[('student', 'Student'), ('vendor', 'Vendor')], help_text='Type of User', max_length=200)),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, help_text='Users Points Balance', max_digits=16)),
                ('reference', models.CharField(help_text='User Reference', max_length=200, unique=True)),
                ('vendor_id', models.CharField(help_text='Vendor ID', max_length=200, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Event Name', max_length=200, unique=True)),
                ('reference', models.CharField(help_text='Event Reference', max_length=200, unique=True)),
                ('time', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateField(default=django.utils.timezone.now)),
                ('event_wager', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount to be deducted if you choose to attend', max_digits=16)),
                ('event_reward', models.DecimalField(decimal_places=2, default=0.0, help_text='Reward for attending events', max_digits=16)),
                ('attendees', models.IntegerField(default=0, help_text='No of users that are attending an event')),
                ('is_completed', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='PendingTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(help_text='Ticket Transaction', max_length=200, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('mode', models.CharField(choices=[('single', 'Single'), ('multiple', 'Multiple')], max_length=25, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=16)),
                ('senders_hash', models.CharField(max_length=200)),
                ('recipients_hash', models.CharField(max_length=200)),
                ('number_of_receivers', models.IntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_name', models.CharField(help_text='Task Name', max_length=200, unique=True)),
                ('reference', models.CharField(help_text='Task Reference', max_length=200, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('expires_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('prize', models.DecimalField(decimal_places=2, default=0.0, help_text='Users Points Balance', max_digits=16)),
                ('is_completed', models.BooleanField(default=False)),
                ('taskers', models.IntegerField(default=0, help_text='No of users that have completed a task')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_reference', models.CharField(max_length=200, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Time transaction was initiated')),
                ('amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Amount of point being sent', max_digits=16)),
                ('senders_hash', models.CharField(max_length=200)),
                ('recipients_hash', models.CharField(max_length=200)),
                ('senders_new_balance', models.DecimalField(decimal_places=2, default=0.0, help_text='Senders New Balance', max_digits=16)),
            ],
        ),
        migrations.CreateModel(
            name='Tasker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_completed', models.BooleanField(default=False)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taskers_task', to='main.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasker', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tasker',
                'verbose_name_plural': 'Taskers',
            },
        ),
        migrations.CreateModel(
            name='InvitedUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attended', models.BooleanField(default=False, help_text='If user has attended Event')),
                ('will_attend', models.BooleanField(default=False, help_text='If user plans to attend')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_name', to='main.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_attendees', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Invited User',
                'verbose_name_plural': 'Invited Users',
            },
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(help_text='Card Reference', max_length=200, unique=True)),
                ('type', models.CharField(choices=[('dynamic', 'Dynamic'), ('club', 'Club')], default='dynamic', max_length=25)),
                ('card_id', models.CharField(blank=True, help_text='Card ID', max_length=25, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_card', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
